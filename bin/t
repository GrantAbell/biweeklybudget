#!/usr/bin/env python
"""
The latest version of this package is available at:
<http://github.com/jantman/biweeklybudget>

################################################################################
Copyright 2016 Jason Antman <jason@jasonantman.com> <http://www.jasonantman.com>

    This file is part of biweeklybudget, also known as biweeklybudget.

    biweeklybudget is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    biweeklybudget is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with biweeklybudget.  If not, see <http://www.gnu.org/licenses/>.

The Copyright and Authors attributions contained herein may not be removed or
otherwise altered, except to add the Author attribution of a contributor to
this work. (Additional Terms pursuant to Section 7b of the AGPL v3)
################################################################################
While not legally required, I sincerely request that anyone who finds
bugs please submit them at <https://github.com/jantman/biweeklybudget> or
to me via email, and that you send any contributions or improvements
either as a pull request on GitHub, or to me via email.
################################################################################

AUTHORS:
Jason Antman <jason@jasonantman.com> <http://www.jasonantman.com>
################################################################################

Test helper to run unit or acceptance tests for only one module.

Based off of:
<https://github.com/jantman/misc-scripts/blob/master/toxit.py>
2017-03-22 version (426801d)
"""

import sys
import os
import argparse
import logging
import subprocess
try:
    from tox.config import parseconfig
except ImportError:
    sys.stderr.write("ERROR: Could not import tox - is it installed?\n")
    raise SystemExit(1)

FORMAT = "[%(levelname)s %(filename)s:%(lineno)s - %(funcName)20s() ] " \
         "%(message)s"
logging.basicConfig(level=logging.INFO, format=FORMAT)
logger = logging.getLogger(__name__)


class ToxIt(object):
    """re-run tox commands against an existing environment"""

    ignore_commands = [
        ['python', '--version'],
        ['virtualenv', '--version'],
        ['pip', '--version'],
        ['pip', 'freeze'],
        ['env']
    ]

    def __init__(self):
        self.env_config = self.parse_toxini()

    def parse_toxini(self):
        """parse the tox ini, return dict of environments to list of commands"""
        logger.debug('Calling tox.config.parseconfig()')
        config = parseconfig(args=[])
        logger.debug('Config parsed; envlist: %s', config.envlist)
        env_config = {}
        for envname in config.envlist:
            bindir = os.path.join(
                config.envconfigs[envname].envdir.strpath,
                'bin'
            )
            env_config[envname] = {
                'commands': [],
                'passenv': [x for x in config.envconfigs[envname].passenv],
                'setenv': {
                    a: config.envconfigs[envname].setenv.get(a) for a in
                    config.envconfigs[envname].setenv.keys()
                }
            }
            for cmd in config.envconfigs[envname].commands:
                if cmd in self.ignore_commands:
                    logger.debug('%s - skipping ignored command: %s',
                                 envname, cmd)
                    continue
                cmd[0] = os.path.join(bindir, cmd[0])
                env_config[envname]['commands'].append(cmd)
            logger.debug('env %s: %s', envname, env_config[envname])
        return env_config


    def run_env(self, env_config):
        """run a single env; return True (success) or False (failure)"""
        for cmd in env_config['commands']:
            if 'py.test' not in cmd:
                logger.info('Skipping non-pytest command: %s', cmd)
                continue
            logger.info('Running command: %s', ' '.join(cmd))
            rcode = subprocess.call(cmd, env=self._make_env(env_config))
            logger.info('Command exited %s', rcode)
            if rcode != 0:
                return False
        return True

    def _make_env(self, env_config):
        e = {}
        for n in env_config['passenv']:
            if n in os.environ:
                e[n] = os.environ[n]
        for k, v in env_config['setenv'].items():
            e[k] = v
        return e

    def run(self, envlist):
        """run all selected envs"""
        failed = False
        for e in envlist:
            res = self.run_env(self.env_config[e])
            if not res:
                failed = True
        if failed:
            print('Some commands failed.')
            raise SystemExit(1)
        print('All commands succeeded.')
        raise SystemExit(0)

    def _find_test_mod_for_module(self, module_name, acceptance=False):
        """
        Given the name or path to a module within biweeklybudget,
        find the path to the test module for it.

        :param module_name: module name/path
        :type module_name: str
        :param acceptance: if True, return acceptance test module; otherwise
          unit test module
        :type acceptance: bool
        :return: test module path
        :rtype: str
        """
        rootdir = os.path.realpath(
            os.path.join(
                os.path.dirname(__file__),
                '..',
                'biweeklybudget'
            )
        )
        logger.debug('Project root directory: %s', rootdir)
        realmod = os.path.realpath(module_name)
        rel_mod = realmod.replace(rootdir, '')
        if rel_mod[0] == '/':
            rel_mod = rel_mod[1:]
        codedir = os.path.dirname(rel_mod)
        codemod = os.path.basename(rel_mod)
        logger.debug('Relative module path: %s (dirname=%s basename=%s)',
                     rel_mod, codedir, codemod)
        test_dir = os.path.join(rootdir, 'tests', 'unit')
        if acceptance:
            test_dir = os.path.join(rootdir, 'tests', 'acceptance')
        testpath = os.path.join(
            test_dir,
            codedir,
            'test_%s' % codemod
        )
        logger.debug('Test module: %s', testpath)
        return testpath

    def run_one_module(
        self, script_name, module_name, expr=None, env_name=None
    ):
        """run one module"""
        if 'tests/unit' in module_name:
            env = 'py310'
            mod = module_name
            logger.debug('Directly-specified unit test module; env=%s mod=%s',
                         env, mod)
        elif 'tests/acceptance' in module_name:
            env = 'acceptance'
            mod = module_name
            logger.debug(
                'Directly-specified acceptance test module; env=%s mod=%s',
                env, mod
            )
        elif script_name.endswith('t'):
            env = 'py310'
            mod = self._find_test_mod_for_module(module_name)
            logger.debug('Discovered unit test module; env=%s mod=%s',
                         env, mod)
        elif script_name.endswith('ta'):
            env = 'acceptance'
            mod = self._find_test_mod_for_module(module_name, True)
            logger.debug('Discovered acceptnace test module; env=%s mod=%s',
                     env, mod)
        else:
            env = script_name
            mod = module_name
            logger.debug(
                'Directly-specified environment name; env=%s mod=%s',
                env, mod
            )
        # run it
        if env_name:
            env = env_name
        env_config = self.env_config[env]
        for cmd in env_config['commands']:
            if not cmd[0].endswith('py.test'):
                logger.info('Skipping non-pytest command: %s', cmd)
                continue
            if expr is not None:
                cmd[-1] = '-k'
                cmd.append(expr)
                cmd.append(mod)
            else:
                cmd[-1] = mod
            logger.info('Running command: %s', ' '.join(cmd))
            rcode = subprocess.call(cmd, env=self._make_env(env_config))
            logger.info('Command exited %s', rcode)
            if rcode != 0:
                print('Command failed: %s' % cmd)
                raise SystemExit(1)
        print('All commands succeeded.')
        raise SystemExit(0)


def parse_args(argv):
    """
    parse arguments/options
    """
    p = argparse.ArgumentParser(
        description='Re-run tox test command for a given code module or test'
                    'module. Use "t" for unit tests and "ta" for acceptance'
                    'tests.'
    )
    p.add_argument('-v', '--verbose', dest='verbose', action='store_true',
                   default=False,
                   help='verbose output')
    p.add_argument('-e', '--env-name', dest='envname', action='store',
                   type=str, default=None, help='tox environment name')
    p.add_argument('MODULE', type=str,
                   help='Module to run; can be either a code module or a '
                        'test module.')
    p.add_argument('EXPR', type=str, default=None, nargs='?',
                   help='Test selection expression (py.test -k EXPR)')
    return p.parse_args(argv)


if __name__ == "__main__":
    args = parse_args(sys.argv[1:])
    if args.verbose:
        logger.setLevel(logging.DEBUG)
    script_name = sys.argv[0].split('/')[-1]
    if args.envname is not None:
        script_name = args.envname
    script = ToxIt()
    script.run_one_module(
        script_name, args.MODULE, expr=args.EXPR, env_name=args.envname
    )
